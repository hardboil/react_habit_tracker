{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","habits","map","key","id","onReset","Component","Navbar","totalCount","App","state","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8bea5cd.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nclass Habit extends PureComponent {\n  //   state = {\n  //     count: 0,\n  //   };\n\n  //   handleIncrement = () => {\n  //     // ! 주의\n  //     // * this.state.count += 1; 과 같이 사용시 react에서는 state의 변경을 인지하지 못하여 render 호출하지 않는다\n\n  //     // state 오브젝트 안에 있는 count 증가 한 후 state를 업데이트\n  //     this.setState({ count: this.state.count + 1 });\n  //   };\n\n  //   handleDecrement = () => {\n  //     const count = this.state.count - 1;\n  //     this.setState({ count: count < 0 ? 0 : count });\n  //   };\n\n  componentDidMount() {\n    console.log(`habit : ${this.props.habit.name} mounted`);\n  }\n  componentWillUnmount() {\n    console.log(`habit : ${this.props.habit.name} will unmounted`);\n  }\n  // * mapping event\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n  };\n\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n\n  render() {\n    console.log(`habit : ${this.props.habit.name}`);\n    // * habit에 정의된 변수명과 동일하게 정의하여야 한다\n    // * - habit.name, habit.count\n    const { name, count } = this.props.habit;\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n          // * 아래 방법은 권장하지 않음\n          //   onClick={() => {\n          //     this.props.onDelete(this.props.habit);\n          //   }}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","import React, { memo } from \"react\";\n\n// ? 구현 형태\n// ? function habitAddForm(props) {};\n// ? const HabitAddForm = (props) => {};\n// ?   => rsi 단축 emmet\n\n// ! 이경우 re-redenr이 지속적으로 발생\n// ? react.memo 사용\n// const HabitAddForm = (props) => {\n//   console.log(\"habitAddForm\");\n\n//   const formRef = React.createRef();\n//   const inputRef = React.createRef();\n\n//   const onSubmit = (event) => {\n//     event.preventDefault();\n//     const name = inputRef.current.value;\n//     name && props.onAdd(name);\n//     formRef.current.reset();\n//   };\n\n//   return (\n//     <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n//       <input\n//         ref={inputRef}\n//         type=\"text\"\n//         className=\"add-input\"\n//         placeholder=\"Habit\"\n//       />\n//       <button className=\"add-button\">Add</button>\n//     </form>\n//   );\n// };\n\nconst HabitAddForm = memo((props) => {\n  console.log(\"habitAddForm\");\n\n  const formRef = React.createRef();\n  const inputRef = React.createRef();\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    const name = inputRef.current.value;\n    name && props.onAdd(name);\n    formRef.current.reset();\n  };\n\n  return (\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        className=\"add-input\"\n        placeholder=\"Habit\"\n      />\n      <button className=\"add-button\">Add</button>\n    </form>\n  );\n});\n\nexport default HabitAddForm;\n","import React, { Component } from \"react\";\nimport Habit from \"./habit\";\nimport HabitAddForm from \"./habitAddForm\";\n\nclass Habits extends Component {\n  // ! 배열의 경우 rendering등 처리시 성능 향상을 위해 유니크한 key값 설정이 필요\n  // ! 배열의 인덱스의 경우는 변경 될 수 있으므로 유니크한 값을 정의해야한다\n  // * app.jsx로 에서 처리\n  //   state = {\n  //     habits: [\n  //       { id: 1, name: \"Reading\", count: 0 },\n  //       { id: 2, name: \"Rnning\", count: 0 },\n  //       { id: 3, name: \"Coding\", count: 0 },\n  //     ],\n  //   };\n\n  handleIncrement = (habit) => {\n    // console.log(habit);\n\n    // // * 배열 복사\n    // // * [...배열데이터]\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n\n    // // * 키값과 동일데이터변수명인 경우 아래와 같이 사용가능\n    // // * this.setState({ habits: habits });\n    // this.setState({ habits });\n\n    this.props.onIncrement(habit);\n  };\n\n  handleDecrement = (habit) => {\n    // console.log(habit);\n\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n\n    // // habits[index].count--;\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n\n    // this.setState({ habits });\n\n    this.props.onDecrement(habit);\n  };\n\n  handleDelete = (habit) => {\n    // const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    // this.setState({ habits });\n\n    this.props.onDelete(habit);\n  };\n\n  handleAdd = (name) => {\n    this.props.onAdd(name);\n  };\n\n  // ! habitAddForm을 PureComponent 사용하고\n  // ! console > Components 설정에서 highlight updates when components render 활성화시\n  // ! <div></div> 사용시 정상적으로 보여주고 <></> 사용시 전부 highlight 되는 버그가 있는듯 함\n  render() {\n    console.log(\"habits\");\n    // {this.state.habits.map((habit) => ())}\n    // ? 여러개의  element를 반환할 경우\n    //   * <React.Fragment>\n    //   * <>\n    //   * </>\n    //   * </React.Fragment>\n    return (\n      <div className=\"habits\">\n        <HabitAddForm onAdd={this.handleAdd} />\n        <ul>\n          {this.props.habits.map((habit) => (\n            <Habit\n              key={habit.id}\n              habit={habit}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n            />\n          ))}\n        </ul>\n        <button className=\"habit-reset\" onClick={this.props.onReset}>\n          Reset All\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { PureComponent } from \"react\";\n\nclass Navbar extends PureComponent {\n  render() {\n    console.log(\"navbar\");\n    return (\n      <nav className=\"navbar\">\n        <i className=\"navbar-logo fas fa-leaf\"></i>\n        <span>Hanbit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","// import React from \"react\";\n// import \"./app.css\";\n// import Habits from \"./components/habits\";\n\n// function App() {\n//   // return <h1>Hello :)</h1>;\n//   return <Habits />;\n// }\n\n// export default App;\n\n// ------------------\n\nimport React, { Component } from \"react\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Rnning\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n    ],\n  };\n\n  // handleIncrement = (habit) => {\n  //   const habits = [...this.state.habits];\n  //   const index = habits.indexOf(habit);\n  //   habits[index].count++;\n\n  //   this.setState({ habits });\n  // };\n  handleIncrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        // ? destructuring object\n        // return { ...habit };\n        return { ...habit, count: habit.count + 1 };\n      } else {\n        return item;\n      }\n    });\n\n    this.setState({ habits });\n  };\n\n  // handleDecrement = (habit) => {\n  //   const habits = [...this.state.habits];\n  //   const index = habits.indexOf(habit);\n\n  //   const count = habits[index].count - 1;\n  //   habits[index].count = count < 0 ? 0 : count;\n\n  //   this.setState({ habits });\n  // };\n\n  handleDecrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      } else {\n        return item;\n      }\n    });\n\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = (name) => {\n    const habits = [\n      ...this.state.habits,\n      { id: Date.now(), name: name, count: 0 },\n    ];\n    this.setState({ habits });\n  };\n\n  // handleReset = () => {\n  //   const hanbits = this.state.habits.map((habit) => {\n  //     habit.count = 0;\n  //     return habit;\n  //   });\n  //   this.setState({ hanbits });\n  // };\n\n  handleReset = () => {\n    const habits = this.state.habits.map((habit) => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    console.log(\"app\");\n    // <React.Fragment>\n    // </React.Fragment>\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\nimport SampleHabit from \"./components/simpleHabit\";\n\n// ! <React.StrictMode>\n// ! StrictMode 사용시 console 2번씩 로그가 출력되는데 오류체크를 위해 자제적으로 수행된다고 함\n// ! StrictMode 를 사용하더라도 배포시에는 정상적으로 1회 수행되며 , 개발시에만 적용된다고 함\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// import \"./app.css\";\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <SampleHabit />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n"],"sourceRoot":""}